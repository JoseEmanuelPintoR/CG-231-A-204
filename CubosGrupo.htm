<!DOCTYPE html>
<html lang="en-GB">

<head>
  <meta charset="utf-8" />
  <title>Grupo de cubos</title>
  <style>
    body {
      margin: 0;
    }
  </style>
</head>

<body>
  <script type="module">
    import * as THREE from 'https://sebastiann16.github.io/CompG/three.module.js';
    import { OrbitControls } from 'https://sebastiann16.github.io/CompG/OrbitControls.js';
    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    var renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(WIDTH, HEIGHT);
    renderer.setClearColor(0xDDDDDD, 1);
    document.body.appendChild(renderer.domElement);

    var scene = new THREE.Scene();

    var camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT);
    camera.position.z = 20;
    camera.position.y = 5;
    scene.add(camera);
    const light = new THREE.AmbientLight(0x404040, 5);
    scene.add(light);


    const size = 1000;
    const divisions = 1000;
    const gridHelper = new THREE.GridHelper( size, divisions );
    scene.add( gridHelper );

    const color = [0x2c5a57, 0x4F9543, 0x84B342];

    function cubo(base, altura, ancho, colo) {
      const geometry = new THREE.BoxGeometry(base, altura, ancho);
      const material = new THREE.MeshToonMaterial({ color: colo });
      return new THREE.Mesh(geometry, material);
    }

    var ArCub = [];
    var n = color.length;
    var lt = 1;
    for (var i = 0; i < n; i++) {
  
      ArCub[i] = cubo(l, l , l, color[i]);
      ArCub[i].position.x = lt/2;
      ArCub[i].position.y = lt/2;
      ArCub[i].position.z = lt/2;
      var l=lt/2;
    }
    
    ArCub[1].position.x = lt/2;
    ArCub[1].position.y = lt+lt/4;
    ArCub[1].position.z = lt/2;

    ArCub[2].position.y = lt+lt/1.6;
    ArCub[2].position.x = lt/2;
    ArCub[2].position.z = lt/2;


    const group = new THREE.Group();
    for (i = 0; i < n; i++) {
      group.add(ArCub[i]);
    }

    scene.add(group);

    const controls = new OrbitControls(camera, renderer.domElement);
    const axesHelper = new THREE.AxesHelper(8);
    scene.add( axesHelper );

    function animate() {

      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera)
    }
    animate();
  </script>
</body>

</html>